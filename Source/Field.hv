

FieldType := enum
{
	"Clean",
	"Mine",
	"Defused"
}

FieldBlock := class
{
	isRevealed := bool
	fieldType := FieldType
	weight := int

	"=" := default
}

MineField := class
{
	SizeX := int
	SizeY := int
	blocks := Vector.{FieldBlock}

	Resize := !(int x, int y) -> void
	{
		SizeX = x
		SizeY = y
		blocks.Resize(x + y*x)
	}
	CleanField := !() -> void
	{
		for it : blocks
		{
			it.isRevealed = false
			it.fieldType = "Clean"
		}
	}
	RandomizeField := !(int mines) -> void
	{
		while mines != 0
		{
			x := RandInt(0..SizeX)
			y := RandInt(0..SizeY)

			fld := ref GetField(x,y)

			if fld.fieldType != "Mine"
			{
				fld.fieldType = "Mine"
				mines -= 1
			}
		}

		for x : SizeX
		{
			for y : SizeY
			{
				weight := 0
				for it : ForAround(x,y,true)
				{
					subFld := ref GetField(it.0,it.1)
					if subFld.fieldType == "Mine"
						weight += 1
				}
				GetField(x,y).weight = weight
			}
		}
	}
	GetSpaceWeight := !(int x, int y) -> int
	{
		return GetField(x,y).weight
	}

	GetField := !(int X,int Y) -> ref FieldBlock
	{
		return blocks[X + Y*SizeX]
	}
	ForAround := !(int x, int y,bool useMiddle = false) -> ProxyForSweeper
	{
		result.base = this&
		result.dimX = x
		result.dimY = y
		result.useMiddle = useMiddle
	}
	PressField := !(int x, int y) -> int
	{
		if GetField(x,y).isRevealed
			return 0
		GetField(x,y).isRevealed = true
		if GetSpaceWeight(x,y) != 0
			return 1

		result = 1
		for it : ForAround(x,y)
		{
			result += PressField(it.0,it.1)
		}
	}

	PressRight := !(int x,int y) -> void
	{
		fld := ref GetField(x,y)
		if fld.isRevealed
			return void

		if fld.fieldType == "Mine"
		{
			fld.isRevealed = true
			fld.fieldType = "Defused"
		}else{
			//printf("nah\n")
		}
	}
	PressAssist := !(int x, int y) -> void
	{
		itField := ref GetField(x,y)

		if not itField.isRevealed
			return void
		if itField.fieldType == "Mine"
			return void

		unpressed := 0
		foundMines := 0
		totalMines := 0

		for it : ForAround(x,y)
		{
			chk := ref GetField(it.0,it.1)
			if chk.fieldType == "Defused"
				foundMines += 1
			if chk.fieldType == "Mine"
				totalMines += 1
			if not chk.isRevealed
				unpressed += 1
		}

		if foundMines + unpressed == totalMines
		{
			for it : ForAround(x,y)
			{
				PressRight(it.0,it.1)
			}
		}else if totalMines == foundMines and unpressed != 0
		{
			for it : ForAround(x,y)
			{
				PressField(it.0,it.1)
			}
		}
	}
	StepSolve := !() -> int
	{
		Rules := AVLMap.{int,Tuple.{int,int,int[9] }}

		for x :  SizeX 
		{
			for y : SizeY
			{
				fld := GetField(x,y)

				if not fld.isRevealed
					continue
				if fld.fieldType == "Defused"
					continue

				notOpenCount := 0
				foundMines := 0
				resArr := int[9]
				for it : ForAround(x,y)
				{
					fld2 := GetField(it.0,it.1)
					if fld2.fieldType == "Defused"
					{
						foundMines += 1
						continue
					}
					if fld2.isRevealed
						continue

					resArr[notOpenCount] = (it.0 shl 16) + it.1
					notOpenCount += 1

				}
				if notOpenCount != 0
				{
					indx := (x shl 16) + y
					rule := ref Rules[indx]
					rule.0 = GetSpaceWeight(x,y) - foundMines
					rule.1 = notOpenCount

					for it : notOpenCount
						rule.2[it] = resArr[it]
				}
			}
		}


		for itOut,oI : Rules
		{
			for itInner,iI : Rules
			{
				if itOut.1 > itInner.1
					continue
				if iI == oI
					continue
				
				match := int
				for i : itOut.1
				{
					for j : itInner.1
					{
						if itOut.2[i] == itInner.2[j]
						{
							match += 1
						}
					}
				}

				maybeCount := itOut.0 - (itOut.1 - match)
				if match == itOut.1
				{
					itInner.0 -= itOut.0

					for i : itOut.1
					{
						for j : itInner.1
						{
							if itOut.2[i] == itInner.2[j]
							{
								itInner.2[j] = itInner.2[itInner.1 - 1]
								itInner.1 -= 1
								break
							}
						}
					}
				}else if maybeCount == itInner.0
				{
					itInner.0 = 0
					for i : itOut.1
					{
						for j : itInner.1
						{
							if itOut.2[i] == itInner.2[j]
							{
								itInner.2[j] = itInner.2[itInner.1 - 1]
								itInner.1 -= 1
								break
							}
						}
					}
					
				}
			}
		}

		for it,itInd : Rules
		{
			if it.0 == it.1 and it.0 != 0
			{
				result += 1

				for i : it.1
				{
					nd := it.2[i]
					x := nd shr 16
					y := nd and_b 0xFFFF
					PressRight(x,y)
				}
			}
			if it.0 == 0 and it.1 != 0
			{
				result += 1

				for i : it.1
				{
					nd := it.2[i]
					x := nd shr 16
					y := nd and_b 0xFFFF
					PressField(x,y)
				}
			}
		}
	}
}

ProxyForSweeper := class
{
	base := MineField^
	dimX := int
	dimY := int
	useMiddle := bool

	"for" := !() -> !()&-> Tuple.{int,int}
	{
		lambd := () ==> Tuple.{int,int}
		{
			diffs := ![-1,0,1]
			for dX : diffs
			{
				newX := dimX + dX
				if newX < 0 or newX >= base.SizeX
					continue
				for dY : diffs
				{
					if dX == 0 and dY == 0 and not useMiddle
						continue
					newY := dimY + dY
					if newY < 0 or newY >= base.SizeY
						continue

					yield !{newX,newY}
				}
			}
			
		}
		return lambd.Capture()
	}
}
