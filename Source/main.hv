//TODO check what cause memory overuse


FieldBlock := class
{
	isMine := bool
	isDefused := bool
	isPressed := bool

	"=" := default
}

SweeperNuklear := class extend SimpleWindow
{
	unknownPlace := void^
	pressedPlace := void^
	pressedMinePlace := void^
	pressedMineDefused := void^

	SizeX := int
	SizeY := int

	mineField := Vector.{FieldBlock}

	firstPress := bool

	mineFieldView := MineField^
	
	InitWindow := virtual !() -> GUIObject^
	{
		mineFieldView = new MineField(this&,15,15)
		mineFieldView.drawLayout = this.drawLayout

		resetButton := new NkButton(nuklearContext,0,40,"Reset")
		resetButton.drawLayout = this.drawLayout
		lay := new LayoutHorizontal(![
			new LayoutSpacer("",0),
			new LayoutVertical(![
				new LayoutSpacer("static",20),
				resetButton,
				new LayoutSpacer("static",20),
				mineFieldView
			]),
			new LayoutSpacer("",0)
		])

		resetButton.SetPressCallback(() ==> {
			ResetField()
		})
		return lay
	}
	InitField := !(int dimX, int dimY) -> void
	{
		SizeX = dimX
		SizeY = dimY

		mineField.Resize(dimX*dimY)

		ResetField()
	}
	GetField := !(int X,int Y) -> ref FieldBlock
	{
		return mineField[X + Y*SizeX]
	}

	ResetField := !() -> void
	{
		firstPress = true
		for it : mineField
		{
			it.isMine = false
			it.isPressed = false
			it.isDefused = false
		}

		mines := 35
		while mines != 0
		{
			x := RandInt(0..(SizeX-1))
			y := RandInt(0..(SizeY-1))

			if GetField(x,y).isMine
				continue
			GetField(x,y).isMine = true
			mines -= 1
		}
	}

	GetSpaceWeight := !(int x, int y) -> int
	{
		for it : ForAround(x,y,true)
		{
			if GetField(it.0,it.1).isMine
				result += 1
		}
	}
	PressField := !(int x, int y) -> int
	{
		if GetField(x,y).isPressed
			return 0
		GetField(x,y).isPressed = true
		if GetSpaceWeight(x,y) != 0
			return 1

		result = 1
		for it : ForAround(x,y)
		{
			result += PressField(it.0,it.1)
		}
	}
	PressAssist := !(int x, int y) -> void
	{
		itField := ref GetField(x,y)

		if not itField.isPressed
			return void
		if itField.isMine
			return void

		unpressed := 0
		foundMines := 0
		totalMines := 0

		for it : ForAround(x,y)
		{
			chk := ref GetField(it.0,it.1)
			if chk.isDefused
				foundMines += 1
			if chk.isMine
				totalMines += 1
			if not chk.isPressed
				unpressed += 1
		}

		if foundMines + unpressed == totalMines
		{
			for it : ForAround(x,y)
			{
				PressRight(it.0,it.1)
			}
		}else if totalMines == foundMines and unpressed != 0
		{
			for it : ForAround(x,y)
			{
				PressField(it.0,it.1)
			}
		}
	}

	PressRight := !(int x,int y) -> void
	{
		fld := ref GetField(x,y)
		if fld.isPressed
			return void

		if fld.isMine
		{
			fld.isPressed = true
			fld.isDefused = true
		}else{
			//printf("nah\n")
		}
	}

	ForAround := !(int x, int y,bool useMiddle = false) -> ProxyForSweeper
	{
		result.base = this&
		result.dimX = x
		result.dimY = y
		result.useMiddle = useMiddle
	}
}

ProxyForSweeper := class
{
	base := SweeperNuklear^
	dimX := int
	dimY := int
	useMiddle := bool

	"for" := !() -> !()&-> Tuple.{int,int}
	{
		lambd := () ==> Tuple.{int,int}
		{
			diffs := ![-1,0,1]
			for dX : diffs
			{
				newX := dimX + dX
				if newX < 0 or newX >= base.SizeX
					continue
				for dY : diffs
				{
					if dX == 0 and dY == 0 and not useMiddle
						continue
					newY := dimY + dY
					if newY < 0 or newY >= base.SizeY
						continue

					yield !{newX,newY}
				}
			}
			
		}
		return lambd.Capture()
	}
}


main := !(char^[] args) -> void
{
	tracy_init()
	w := new SweeperNuklear(700,700,"MineSweeper")
	w.InitField(15,15)
	//w.SetFPSLimit(30)
	w.Run()
}
