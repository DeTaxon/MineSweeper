
MineFieldView := class extend GUIObject
{
	boxSize := float
	margin := float

	base := SweeperNuklear^

	tilesPool := TDescriptorPool^ 

	atlasTest := ImageAtlas
	atlasTestDesc := VkDescriptorSet

	baseMesh := TVkMesh^
	baseIndCount := int

	bombRect := stbrp_rect^
	flagRect := stbrp_rect^
	backgroundRect := stbrp_rect^
	numRect := stbrp_rect^
	unknownRect := stbrp_rect^

	vecData := Vector.{float}
	indData := Vector.{int}
	tilesState := Vector.{u8}

	this := !(SweeperNuklear^ bck,int x, int y) -> void
	{
		base = bck
		boxSize = 30.0
		margin = 2.0

		tilesState.Resize(x*y)

		SetSize("static",boxSize*x + margin*(x - 1), "static", boxSize*y + margin*(y - 1))

		tilesPool := base.vkOverlay.textDrawLayout.CreateDescriptorPool(0,20)


		atlasTest."this"(512,512,32)
		atlasTest.AddImage(FSGetFile("Textures/Flag.webp"))
		atlasTest.AddImage(FSGetFile("Textures/Bomb.webp"))
		atlasTest.AddImage(FSGetFile("Textures/Background.webp"))
		atlasTest.AddImage(FSGetFile("Textures/Tile1.webp"))
		atlasTest.AddImage(FSGetFile("Textures/Tile2.webp"))
		for i : 1..8
		{
			atlasTest.AddImage(FSGetFile(CreateString("Textures/",i,".webp")))
		}

		newImage := new Image()
		newImage.CreateBlank(1,1)
		newImage.ForEachPixelU8((x,y,ptr) ==> {
			ptr[0] = 255
			ptr[1] = 255
			ptr[2] = 255
			ptr[3] = 255
		})
		atlasTest.AddImage(newImage)
		atlasTest.Finish(bck.vInstance)

		bombRect = atlasTest.rectangles[1]&
		flagRect = atlasTest.rectangles[0]&
		backgroundRect = atlasTest.rectangles[2]&
		numRect = atlasTest.rectangles[5]&
		unknownRect = atlasTest.rectangles[3]&

		atlasTestDesc = tilesPool.CreateDescriptor()
		vSetTexture(bck.vInstance,atlasTestDesc,atlasTest.atlasTexture,bck.vInstance.SamplerNearest)


		backgroundSize := 4*5
		vecData.Resize(backgroundSize + x*y*5*2*4)
		indData.Resize(6 + x*y*6*2)

		vecPtr := vecData.GetPointer()

		{
			val := vecData.GetPointer()
			rct := ref atlasTest.rectangles[13]

			SetTileRect(val,rct&)
			SetTileColor(val,45,148,117,255)

			val[0] = 0.0 - 4
			val[1] = 0.0 - 4

			val[5] = 0.0 - 4
			val[6] = y*(boxSize + margin) - margin + 4

			val[10] = x*(boxSize + margin) - margin + 4
			val[11] = y*(boxSize + margin) - margin + 4

			val[15] = x*(boxSize + margin) - margin + 4
			val[16] = 0.0 - 4
		}


		for i : x
		{
			for j : x
			{
				rect := ref atlasTest.rectangles[3 + ((i + j) and_b 1)]
				val := vecPtr[backgroundSize + (i + j*x)*5*2*4]&

				for k : 2
				{
					ofst := k*20

					SetTileRect(val[0 + ofst]&,rect&)
					
					indent := 0.0

					if k == 0
					{
						SetTileColor(val[ofst]&,255,255,255,255)
					}else{
						indent = boxSize*0.10
					}

					val[0 + ofst] = i*(boxSize + margin) + indent
					val[1 + ofst] = j*(boxSize + margin) + indent

					val[5 + ofst] = i*(boxSize + margin) + indent
					val[6 + ofst] = j*(boxSize + margin) + boxSize - indent

					val[10 + ofst] = i*(boxSize + margin) + boxSize - indent
					val[11 + ofst] = j*(boxSize + margin) + boxSize - indent

					val[15 + ofst] = i*(boxSize + margin) + boxSize - indent
					val[16 + ofst] = j*(boxSize + margin) + indent
				}
			}
		}

		cntr := 0
		for i : (x*y*2 + 1)
		{
			ind := indData[i*6]&
			ind[0] = cntr 
			ind[1] = cntr + 1
			ind[2] = cntr + 2
			ind[3] = cntr
			ind[4] = cntr + 2
			ind[5] = cntr + 3

			cntr += 4
		}
		baseMesh = base.vInstance.CreateMesh(TArraySpan.{u8}(vecData.GetPointer()->{u8^},4*vecData.Size()),TArraySpan.{u8}(indData.GetPointer()->{u8^},indData.Size()*4),VKType(VType_UInt32,1))

		baseIndCount = indData.Size()
	}
	PushDraw := virtual !(VkOverlayContext^ ctx,VkCommandBuffer cmdB,vec2f offset) -> void
	{
		ctx.textDrawShader.ApplyShaderToQueue(ctx.inst,cmdB,ctx.w,ctx.h)
		sts := VkDescriptorSet[1]
		sts[0] = atlasTestDesc
		ctx.inst.Funcs.vkCmdBindDescriptorSets(cmdB,VK_PIPELINE_BIND_POINT_GRAPHICS,ctx.textDrawLayout.Get(),0,1,sts[0]&,0,null)
		baseMesh.Bind(cmdB)
		scales := float[4]
		scales[0] = 1.0 / ctx.w
		scales[1] = 1.0 / ctx.h
		scales[2] = offset.x
		scales[3] = offset.y
		ctx.inst.Funcs.vkCmdPushConstants(cmdB,ctx.textDrawLayout.Get(),VK_SHADER_STAGE_VERTEX_BIT,0,4*4,scales&)
		ctx.inst.Funcs.vkCmdDrawIndexed(cmdB,baseIndCount,1,0,0,0)

		return void
	}

	MousePressed := virtual !(VkOverlayContext^ ctx,int buttonNum, bool pressed,vec2f offset) -> void
	{
		if not pressed
			return void

		indX := offset.x / (boxSize + margin)
		indY := offset.y / (boxSize + margin)

		switch buttonNum
		{
			case 0
				if base.M2Pressed
				{
					base.mineField.PressAssist(indX,indY)
				}else{
					if base.firstPress
					{
						while true
						{
							base.mineField.CleanField()
							base.mineField.RandomizeField(35)
							fld := ref base.mineField.GetField(indX,indY)
							if fld.fieldType == "Mine"
								continue
							base.mineField.PressField(indX,indY)

							while base.mineField.StepSolve() != 0 {}

							if not base.mineField.IsFullyRevealed()
								continue

							base.mineField.Rehide()
							base.mineField.PressField(indX,indY)

							break
						}
						//while base.mineField.PressField(indX,indY) < 10
						//{
						//	base.mineField.CleanField()
						//}
						base.firstPress = false
					}else{
						base.mineField.PressField(indX,indY)
					}
				}
			case 1
				base.mineField.PressRight(indX,indY)
		}
		UpdateGPUField()
		ctx.DataGeneration += 1
	}
	UpdateGPUField := !() -> void
	{
		changedData := false
		for i : base.SizeX
		{
			for j : base.SizeY
			{
				itInd := 0

				fld := base.mineField.GetField(i,j)

				if fld.isRevealed
				{
					if fld.fieldType == "Mine" or fld.fieldType == "Defused"
					{
						if fld.fieldType == "Defused"
						{
							//flagTile.Draw(ctx,cmdB,quadSmallMesh,vec2f(rect2.x,rect2.y))
							itInd = 10
						}else{
							//bombTile.Draw(ctx,cmdB,quadMesh,vec2f(rect2.x,rect2.y))
							itInd = 11
						}
					}else{
						wdth := base.mineField.GetSpaceWeight(i,j)
						if wdth in 1..8
						{
							itInd = wdth
						}else{
							itInd = 9
						}
					}
				}else{
					itInd = 0
				}
				tInd := i + j*base.SizeX
				if itInd != tilesState[tInd]
				{
					tilesState[tInd] = itInd
					changedData = true

					vecPtr := vecData[4*5 + tInd*5*2*4]&

					setRect := flagRect

					switch itInd
					{
						case 0 setRect = unknownRect[(i + j) and_b 1]&	
						case in 1..8 setRect = backgroundRect
						case 9 setRect = backgroundRect
						case 10 setRect = backgroundRect
						case 11 setRect = backgroundRect
					}
					SetTileRect(vecPtr,setRect)


					if itInd in 1..8 or itInd == 10 or itInd == 11
					{
						backRect := stbrp_rect^
						switch itInd
						{
							case in 1..8  backRect = numRect[itInd - 1]&
							case 10 backRect = flagRect
							case 11 backRect = bombRect
						}
						SetTileRect(vecPtr[20]&,backRect)
						SetTileColor(vecPtr[20]&,255,255,255,255)
					}else{
						SetTileColor(vecPtr[20]&,255,255,255,0)
					}

				}
			}
		}
		if changedData
		{
			baseMesh.TransferData(TArraySpan.{u8}(vecData.GetPointer()->{u8^},4*vecData.Size()),TArraySpan.{u8}(indData.GetPointer()->{u8^},indData.Size()*4))
		}
	}
	SetTileRect := !(float^ vecPtr,stbrp_rect^ setRect) -> void
	{
		vecPtr[2] = setRect.x / atlasTest.atlasW
		vecPtr[3] = setRect.y / atlasTest.atlasH

		vecPtr[7] = setRect.x / atlasTest.atlasW
		vecPtr[8] = (setRect.y + setRect.h)/ atlasTest.atlasH

		vecPtr[12] = (setRect.x + setRect.w) / atlasTest.atlasW
		vecPtr[13] = (setRect.y + setRect.h) / atlasTest.atlasH

		vecPtr[17] = (setRect.x + setRect.w) / atlasTest.atlasW
		vecPtr[18] = setRect.y / atlasTest.atlasH
	}
	SetTileColor := !(float^ vecPtr,u8 r, u8 g, u8 b, u8 a) -> void
	{
		clr := u8[4]
		clr[0] = r
		clr[1] = g
		clr[2] = b
		clr[3] = a

		clr2 := clr[0]&->{float^}^

		vecPtr[4] = clr2
		vecPtr[9] = clr2
		vecPtr[14] = clr2
		vecPtr[19] = clr2
	}
}
