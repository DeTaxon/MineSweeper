meshData := class
{
	pos := float[2]
	uv := float[2]
	color := u8[4]
}

MineField := class extend GUIObject
{
	boxSize := float
	margin := float

	base := SweeperNuklear^

	quadMesh := TVkMesh^
	quadSmallMesh := TVkMesh^
	backQuad := TVkMesh^

	tilesPool := TDescriptorPool^ 

	flagTile := Tile
	bombTile := Tile
	backgroundTile := Tile
	blankTiles := Tile[2]
	numbersTile := Tile[10]

	quadLayout := TShaderInput^
	quadShader := vShader^

	this := !(SweeperNuklear^ bck,int x, int y) -> void
	{
		base = bck
		boxSize = 30.0
		margin = 2.0

		SetSize("static",boxSize*x + margin*(x - 1), "static", boxSize*y + margin*(y - 1))

		tilesPool := base.vkOverlay.textDrawLayout.CreateDescriptorPool(0,20)

		quadLayout = base.mainRenderPass.CreateLayout(![
			VKType(VType_Float,2),
			VKType(VType_Float,2),
			VKType(VType_UInt8,4)
		],![
		],![
			new TVertexPushConstant(4*6)
		],
		1
		)
		quadShader = quadLayout.CreateShader(#EmbVKShader("TextVert.vert"),#EmbVKShader("TextFrag.frag"))

		verts := meshData[4]

		for it,i : ![!{0.0,0.0} ,!{1.0,0.0} ,!{0.0,1.0} ,!{1.0,1.0}]
		{
			verts[i].pos[0] = 30.0*it.0
			verts[i].pos[1] = 30.0*it.1
			verts[i].uv[0] = it.0
			verts[i].uv[1] = it.1
			verts[i].color[0] = 255
			verts[i].color[1] = 255
			verts[i].color[2] = 255
			verts[i].color[3] = 255
		}
		inds := ref ![0,1,2,1,3,2]

		quadMesh = base.vInstance.CreateMesh(TArraySpan.{u8}(verts[0]&->{u8^},4*meshData->TypeSize),TArraySpan.{u8}(inds[0]&->{u8^},6*4),VKType(VType_UInt32,1))

		for it,i : ![!{0.0,0.0} ,!{1.0,0.0} ,!{0.0,1.0} ,!{1.0,1.0}]
		{
			verts[i].pos[0] = it.0
			verts[i].pos[1] = it.1
			verts[i].color[0] = 45
			verts[i].color[1] = 148
			verts[i].color[2] = 117
		}

		backQuad = base.vInstance.CreateMesh(TArraySpan.{u8}(verts[0]&->{u8^},4*meshData->TypeSize),TArraySpan.{u8}(inds[0]&->{u8^},6*4),VKType(VType_UInt32,1))

		smallSide := 0.15
		bigSide := 0.85
		for it,i : ![!{smallSide,smallSide} ,!{bigSide,smallSide} ,!{smallSide,bigSide} ,!{bigSide,bigSide}]
		{
			verts[i].pos[0] = 30.0*it.0
			verts[i].pos[1] = 30.0*it.1
			verts[i].color[0] = 255
			verts[i].color[1] = 255
			verts[i].color[2] = 255
		}
		quadSmallMesh = base.vInstance.CreateMesh(TArraySpan.{u8}(verts[0]&->{u8^},4*meshData->TypeSize),TArraySpan.{u8}(inds[0]&->{u8^},6*4),VKType(VType_UInt32,1))

		flagTile.Create(base,tilesPool,FSGetFile("Textures/Flag.webp"))
		bombTile.Create(base,tilesPool,FSGetFile("Textures/Bomb.webp"))
		backgroundTile.Create(base,tilesPool,FSGetFile("Textures/Background.webp"))
		blankTiles[0].Create(base,tilesPool,FSGetFile("Textures/Tile1.webp"))
		blankTiles[1].Create(base,tilesPool,FSGetFile("Textures/Tile2.webp"))
		
		for i : 1..8
		{
			numbersTile[i].Create(base,tilesPool,FSGetFile(CreateString("Textures/",i,".webp")))
		}

	}
	PushDraw := virtual !(VkOverlayContext^ ctx,VkCommandBuffer cmdB,vec2f offset) -> void
	{
		sc := VkRect2D
		sc.offset.x = 0
		sc.offset.y = 0
		sc.extent.width = ctx.w
		sc.extent.height = ctx.h
		base.vInstance.Funcs.vkCmdSetScissor(cmdB,0,1,sc&)


		quadShader.ApplyShaderToQueue(base.vInstance,cmdB,ctx.w,ctx.h)
		backQuad.Bind(cmdB)
		scales := float[6]
		scales[0] = 1.0 / ctx.w
		scales[1] = 1.0 / ctx.h
		scales[2] = offset.x - 4
		scales[3] = offset.y - 4
		scales[4] = thisLayoutSize.x + 8
		scales[5] = thisLayoutSize.y + 8
		base.vInstance.Funcs.vkCmdPushConstants(cmdB,quadLayout.Get(),VK_SHADER_STAGE_VERTEX_BIT,0,4*6,scales&)
		base.vInstance.Funcs.vkCmdDrawIndexed(cmdB,6,1,0,0,0)

		rect2 := nk_rect
		for x : base.SizeX
		{
			for y : base.SizeY
			{
				rect2.x = offset.x + x*(boxSize + margin)
				rect2.y = offset.y + y*(boxSize + margin)
				rect2.w = boxSize
				rect2.h = boxSize

				fld := base.GetField(x,y)

				if fld.isPressed
				{
					if fld.isMine
					{
						if fld.isDefused
						{
							blankTiles[ (x + y) and_b 1 ].Draw(ctx,cmdB,quadMesh,vec2f(rect2.x,rect2.y))
							flagTile.Draw(ctx,cmdB,quadSmallMesh,vec2f(rect2.x,rect2.y))
						}else{
							backgroundTile.Draw(ctx,cmdB,quadMesh,vec2f(rect2.x,rect2.y))
							bombTile.Draw(ctx,cmdB,quadMesh,vec2f(rect2.x,rect2.y))
						}
					}else{
						wdth := base.GetSpaceWeight(x,y)
						backgroundTile.Draw(ctx,cmdB,quadMesh,vec2f(rect2.x,rect2.y))
						if wdth in 1..8
						{
							numbersTile[wdth].Draw(ctx,cmdB,quadSmallMesh,vec2f(rect2.x,rect2.y))	
						}
					}
				}else{
					blankTiles[ (x + y) and_b 1 ].Draw(ctx,cmdB,quadMesh,vec2f(rect2.x,rect2.y))
				}
			}
		}
	}

	MousePressed := virtual !(int buttonNum, bool pressed,vec2f offset) -> void
	{
		if not pressed
			return void

		indX := offset.x / (boxSize + margin)
		indY := offset.y / (boxSize + margin)

		switch buttonNum
		{
			case 0
				if base.M2Pressed
				{
					base.PressAssist(indX,indY)
				}else{
					if base.firstPress
					{
						while base.PressField(indX,indY) < 10
						{
							base.ResetField()
						}
						base.firstPress = false
					}else{
						base.PressField(indX,indY)
					}
				}
			case 1
				base.PressRight(indX,indY)
		}
	}
}
