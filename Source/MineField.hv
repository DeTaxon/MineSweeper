
MineField := class extend GUIObject
{
	boxSize := float
	margin := float

	base := SweeperNuklear^

	quadMesh := TVkMesh^
	quadSmallMesh := TVkMesh^
	backQuad := TVkMesh^

	tilesPool := TDescriptorPool^ 

	flagTile := Tile
	bombTile := Tile
	backgroundTile := Tile
	blankTiles := Tile[2]
	numbersTile := Tile[10]

	atlasTest := ImageAtlas
	atlasTestDesc := VkDescriptorSet

	baseMesh := TVkMesh^
	baseIndCount := int

	quadLayout := TShaderInput^
	quadShader := vShader^

	this := !(SweeperNuklear^ bck,int x, int y) -> void
	{
		base = bck
		boxSize = 30.0
		margin = 2.0

		SetSize("static",boxSize*x + margin*(x - 1), "static", boxSize*y + margin*(y - 1))

		tilesPool := base.vkOverlay.textDrawLayout.CreateDescriptorPool(0,20)

		quadLayout = base.mainRenderPass.CreateLayout(![
			VKType(VType_Float,2),
			VKType(VType_Float,2),
			VKType(VType_UInt8,4)
		],![
		],![
			new TVertexPushConstant(4*6)
		],
		1
		)
		quadShader = quadLayout.CreateShader(#EmbVKShader("TextVert.vert"),#EmbVKShader("TextFrag.frag"))

		verts := GUIVertex[4]

		for it,i : ![!{0.0,0.0} ,!{1.0,0.0} ,!{0.0,1.0} ,!{1.0,1.0}]
		{
			verts[i].pos[0] = 30.0*it.0
			verts[i].pos[1] = 30.0*it.1
			verts[i].uv[0] = it.0
			verts[i].uv[1] = it.1
			verts[i].color[0] = 255
			verts[i].color[1] = 255
			verts[i].color[2] = 255
			verts[i].color[3] = 255
		}
		inds := ref ![0,1,2,1,3,2]

		quadMesh = base.vInstance.CreateMesh(TArraySpan.{u8}(verts[0]&->{u8^},4*GUIVertex->TypeSize),TArraySpan.{u8}(inds[0]&->{u8^},6*4),VKType(VType_UInt32,1))

		for it,i : ![!{0.0,0.0} ,!{1.0,0.0} ,!{0.0,1.0} ,!{1.0,1.0}]
		{
			verts[i].pos[0] = it.0
			verts[i].pos[1] = it.1
			verts[i].color[0] = 45
			verts[i].color[1] = 148
			verts[i].color[2] = 117
		}

		backQuad = base.vInstance.CreateMesh(TArraySpan.{u8}(verts[0]&->{u8^},4*GUIVertex->TypeSize),TArraySpan.{u8}(inds[0]&->{u8^},6*4),VKType(VType_UInt32,1))

		smallSide := 0.15
		bigSide := 0.85
		for it,i : ![!{smallSide,smallSide} ,!{bigSide,smallSide} ,!{smallSide,bigSide} ,!{bigSide,bigSide}]
		{
			verts[i].pos[0] = 30.0*it.0
			verts[i].pos[1] = 30.0*it.1
			verts[i].color[0] = 255
			verts[i].color[1] = 255
			verts[i].color[2] = 255
		}
		quadSmallMesh = base.vInstance.CreateMesh(TArraySpan.{u8}(verts[0]&->{u8^},4*GUIVertex->TypeSize),TArraySpan.{u8}(inds[0]&->{u8^},6*4),VKType(VType_UInt32,1))

		flagTile.Create(base,tilesPool,FSGetFile("Textures/Flag.webp"))
		bombTile.Create(base,tilesPool,FSGetFile("Textures/Bomb.webp"))
		backgroundTile.Create(base,tilesPool,FSGetFile("Textures/Background.webp"))
		blankTiles[0].Create(base,tilesPool,FSGetFile("Textures/Tile1.webp"))
		blankTiles[1].Create(base,tilesPool,FSGetFile("Textures/Tile2.webp"))
		
		for i : 1..8
		{
			numbersTile[i].Create(base,tilesPool,FSGetFile(CreateString("Textures/",i,".webp")))
		}

		atlasTest."this"(512,512,32)
		atlasTest.AddImage(FSGetFile("Textures/Flag.webp"))
		atlasTest.AddImage(FSGetFile("Textures/Bomb.webp"))
		atlasTest.AddImage(FSGetFile("Textures/Background.webp"))
		atlasTest.AddImage(FSGetFile("Textures/Tile1.webp"))
		atlasTest.AddImage(FSGetFile("Textures/Tile2.webp"))
		for i : 1..8
		{
			atlasTest.AddImage(FSGetFile(CreateString("Textures/",i,".webp")))
		}

		newImage := new Image()
		newImage.CreateBlank(1,1)
		newImage.ForEachPixelU8((x,y,ptr) ==> {
			ptr[0] = 255
			ptr[1] = 255
			ptr[2] = 255
			ptr[3] = 255
		})
		atlasTest.AddImage(newImage)
		atlasTest.Finish(bck.vInstance)

		atlasTestDesc = tilesPool.CreateDescriptor()
		vSetTexture(bck.vInstance,atlasTestDesc,atlasTest.atlasTexture,bck.vInstance.SamplerNearest)

		vecData := Vector.{float}
		indData := Vector.{int}


		backgroundSize := 4*5
		vecData.Resize(backgroundSize + x*y*5*2*4)
		indData.Resize(6 + x*y*6*2)


		vecPtr := vecData.GetPointer()

		{
			val := vecData.GetPointer()
			rct := ref atlasTest.rectangles[13]

			color := u8[4]
			color[0] = 45
			color[1] = 148
			color[2] = 117
			color[3] = 255

			val[0] = 0.0 - 4
			val[1] = 0.0 - 4
			val[2] = rct.x / atlasTest.atlasW
			val[3] = rct.y / atlasTest.atlasH
			val[4] = color[0]&->{float^}^

			val[5] = 0.0 - 4
			val[6] = y*(boxSize + margin) - margin + 8
			val[7] = rct.x / atlasTest.atlasW
			val[8] = (rct.y + rct.h) / atlasTest.atlasH
			val[9] = color[0]&->{float^}^

			val[10] = x*(boxSize + margin) - margin + 8
			val[11] = y*(boxSize + margin) - margin + 8
			val[12] = (rct.x + rct.w) / atlasTest.atlasW
			val[13] = (rct.y + rct.h) / atlasTest.atlasH
			val[14] = color[0]&->{float^}^

			val[15] = x*(boxSize + margin) - margin + 8
			val[16] = 0.0 - 4
			val[17] = (rct.x + rct.w) / atlasTest.atlasW
			val[18] = rct.y / atlasTest.atlasH
			val[19] = color[0]&->{float^}^
		}


		for i : x
		{
			for j : x
			{
				rect := ref atlasTest.rectangles[3 + ((i + j) and_b 1)]
				val := vecPtr[backgroundSize + (i + j*x)*5*2*4]&

				for k : 2
				{
					ofst := k*20

					val[0 + ofst] = i*(boxSize + margin)
					val[1 + ofst] = j*(boxSize + margin)
					val[2 + ofst] = rect.x / atlasTest.atlasW
					val[3 + ofst] = rect.y / atlasTest.atlasH
					val[4 + ofst] = 0.0
					if k == 0
					{
						c := val[4]&->{u8^}
						c[0] = 255
						c[1] = 255
						c[2] = 255
						c[3] = 255
					}

					val[5 + ofst] = i*(boxSize + margin)
					val[6 + ofst] = j*(boxSize + margin) + boxSize
					val[7 + ofst] = rect.x / atlasTest.atlasW
					val[8 + ofst] = (rect.y + rect.h) / atlasTest.atlasH
					val[9 + ofst] = val[4 + ofst]

					val[10 + ofst] = i*(boxSize + margin) + boxSize
					val[11 + ofst] = j*(boxSize + margin) + boxSize
					val[12 + ofst] = (rect.x + rect.w) / atlasTest.atlasW
					val[13 + ofst] = (rect.y + rect.h) / atlasTest.atlasH
					val[14 + ofst] = val[4 + ofst]

					val[15 + ofst] = i*(boxSize + margin) + boxSize
					val[16 + ofst] = j*(boxSize + margin)
					val[17 + ofst] = (rect.x + rect.w) / atlasTest.atlasW
					val[18 + ofst] = rect.y / atlasTest.atlasH
					val[19 + ofst] = val[4 + ofst]
				}
			}
		}

		cntr := 0
		for i : (x*y*2 + 1)
		{
			ind := indData[i*6]&
			ind[0] = cntr 
			ind[1] = cntr + 1
			ind[2] = cntr + 2
			ind[3] = cntr
			ind[4] = cntr + 2
			ind[5] = cntr + 3

			cntr += 4
		}
		baseMesh = base.vInstance.CreateMesh(TArraySpan.{u8}(vecData.GetPointer()->{u8^},4*vecData.Size()),TArraySpan.{u8}(indData.GetPointer()->{u8^},indData.Size()*4),VKType(VType_UInt32,1))

		baseIndCount = indData.Size()
	}
	PushDraw := virtual !(VkOverlayContext^ ctx,VkCommandBuffer cmdB,vec2f offset) -> void
	{

		//sc := VkRect2D
		//sc.offset.x = 0
		//sc.offset.y = 0
		//sc.extent.width = ctx.w
		//sc.extent.height = ctx.h
		//base.vInstance.Funcs.vkCmdSetScissor(cmdB,0,1,sc&)

		//quadShader.ApplyShaderToQueue(base.vInstance,cmdB,ctx.w,ctx.h)
		//backQuad.Bind(cmdB)
		//scales := float[6]
		//scales[0] = 1.0 / ctx.w
		//scales[1] = 1.0 / ctx.h
		//scales[2] = offset.x - 4
		//scales[3] = offset.y - 4
		//scales[4] = thisLayoutSize.x + 8
		//scales[5] = thisLayoutSize.y + 8
		//base.vInstance.Funcs.vkCmdPushConstants(cmdB,quadLayout.Get(),VK_SHADER_STAGE_VERTEX_BIT,0,4*6,scales&)
		//base.vInstance.Funcs.vkCmdDrawIndexed(cmdB,6,1,0,0,0)


		ctx.textDrawShader.ApplyShaderToQueue(ctx.inst,cmdB,ctx.w,ctx.h)
		sts := VkDescriptorSet[1]
		sts[0] = atlasTestDesc
		ctx.inst.Funcs.vkCmdBindDescriptorSets(cmdB,VK_PIPELINE_BIND_POINT_GRAPHICS,ctx.textDrawLayout.Get(),0,1,sts[0]&,0,null)
		baseMesh.Bind(cmdB)
		scales := float[4]
		scales[0] = 1.0 / ctx.w
		scales[1] = 1.0 / ctx.h
		scales[2] = offset.x
		scales[3] = offset.y
		ctx.inst.Funcs.vkCmdPushConstants(cmdB,ctx.textDrawLayout.Get(),VK_SHADER_STAGE_VERTEX_BIT,0,4*4,scales&)
		ctx.inst.Funcs.vkCmdDrawIndexed(cmdB,baseIndCount,1,0,0,0)
		//ctx.inst.Funcs.vkCmdDrawIndexed(cmdB,6,1,0,0,0)

		return void

		rect2 := nk_rect
		for x : base.SizeX
		{
			for y : base.SizeY
			{
				rect2.x = offset.x + x*(boxSize + margin)
				rect2.y = offset.y + y*(boxSize + margin)
				rect2.w = boxSize
				rect2.h = boxSize

				fld := base.GetField(x,y)

				if fld.isPressed
				{
					if fld.isMine
					{
						if fld.isDefused
						{
							blankTiles[ (x + y) and_b 1 ].Draw(ctx,cmdB,quadMesh,vec2f(rect2.x,rect2.y))
							flagTile.Draw(ctx,cmdB,quadSmallMesh,vec2f(rect2.x,rect2.y))
						}else{
							backgroundTile.Draw(ctx,cmdB,quadMesh,vec2f(rect2.x,rect2.y))
							bombTile.Draw(ctx,cmdB,quadMesh,vec2f(rect2.x,rect2.y))
						}
					}else{
						wdth := base.GetSpaceWeight(x,y)
						backgroundTile.Draw(ctx,cmdB,quadMesh,vec2f(rect2.x,rect2.y))
						if wdth in 1..8
						{
							numbersTile[wdth].Draw(ctx,cmdB,quadSmallMesh,vec2f(rect2.x,rect2.y))
						}
					}
				}else{
					blankTiles[ (x + y) and_b 1 ].Draw(ctx,cmdB,quadMesh,vec2f(rect2.x,rect2.y))
				}
			}
		}
	}

	MousePressed := virtual !(int buttonNum, bool pressed,vec2f offset) -> void
	{
		if not pressed
			return void

		indX := offset.x / (boxSize + margin)
		indY := offset.y / (boxSize + margin)

		switch buttonNum
		{
			case 0
				if base.M2Pressed
				{
					base.PressAssist(indX,indY)
				}else{
					if base.firstPress
					{
						while base.PressField(indX,indY) < 10
						{
							base.ResetField()
						}
						base.firstPress = false
					}else{
						base.PressField(indX,indY)
					}
				}
			case 1
				base.PressRight(indX,indY)
		}
	}
}
