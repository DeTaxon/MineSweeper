MineField := class extend GUIObject
{
	boxSize := float
	margin := float

	base := SweeperNuklear^

	mineBlank := NkButton^
	minePressed := NkButton^
	mineDefused := NkButton^
	nonMinePressed := NkButton^[9]

	this := !(SweeperNuklear^ bck,int x, int y) -> void
	{
		base = bck
		boxSize = 30.0
		margin = 2.0

		SetSize("static",boxSize*x + margin*(x - 1), "static", boxSize*y + margin*(y - 1))
	}
	PushDraw := virtual !(VkCommandBuffer cmdB,int w,int h,vec2f offset) -> void
	{
		rect2 := nk_rect
		for x : base.SizeX
		{
			for y : base.SizeY
			{
				rect2.x = offset.x + x*(boxSize + margin)
				rect2.y = offset.y + y*(boxSize + margin)
				rect2.w = boxSize
				rect2.h = boxSize

				fld := base.GetField(x,y)

				if fld.isPressed
				{
					if fld.isMine
					{
						if fld.isDefused
						{
							mineDefused.drawLayout = this.drawLayout
							mineDefused.PushDraw(cmdB,w,h,vec2f(rect2.x,rect2.y))
						}else{
							minePressed.drawLayout = this.drawLayout
							minePressed.PushDraw(cmdB,w,h,vec2f(rect2.x,rect2.y))
						}
					}else{
						wdth := base.GetSpaceWeight(x,y)
						nonMinePressed[wdth].drawLayout = this.drawLayout
						nonMinePressed[wdth].PushDraw(cmdB,w,h,vec2f(rect2.x,rect2.y))
					}
				}else{
					mineBlank.drawLayout = this.drawLayout
					mineBlank.PushDraw(cmdB,w,h,vec2f(rect2.x,rect2.y))
				}
			}
		}
	}

	SetLayout := virtual !(NuklearVulkanContext^ ctx,vec2f setSize) -> void
	{
		super(ctx,setSize)
		if mineBlank == null
		{
			mineBlank = new NkButton(base.nuklearContext,30,30,"")
			mineBlank.SetLayout(ctx,vec2f(30,30))

			minePressed = new NkButton(base.nuklearContext,30,30,"")
			minePressed.SetColor("normal",255,0,0)
			minePressed.SetLayout(ctx,vec2f(30,30))

			mineDefused = new NkButton(base.nuklearContext,30,30,"")
			mineDefused.SetColor("normal",0,255,0)
			mineDefused.SetLayout(ctx,vec2f(30,30))

			numbers := !["","1","2","3","4","5","6","7","8"]
			for i : 9
			{
				nonMinePressed[i] = new NkButton(base.nuklearContext,30,30,numbers[i])
				nonMinePressed[i].SetColor("normal",128,128,128)
				nonMinePressed[i].SetLayout(ctx,vec2f(30,30))
			}
		}

	}
	MousePressed := virtual !(int buttonNum, bool pressed,vec2f offset) -> void
	{
		indX := offset.x / (boxSize + margin)
		indY := offset.y / (boxSize + margin)

		switch buttonNum
		{
			case 0
				if base.M2Pressed
				{
					base.PressAssist(indX,indY)
				}else{
					if base.firstPress
					{
						while base.PressField(indX,indY) < 10
						{
							base.ResetField()
						}
						base.firstPress = false
					}else{
						base.PressField(indX,indY)
					}
				}
			case 1
				base.PressRight(indX,indY)
		}
	}
}
